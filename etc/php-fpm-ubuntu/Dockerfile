FROM ubuntu:17.10 

# RUN set -xe \
#     && fetchDeps="\
#     locales \
#     curl \
#     software-properties-common \
#     git \
#     " \
#     \
#     && apt-get clean \
#     && apt-get -y update \
#     && apt-get install -y --no-install-recommends $fetchDeps \
#     && locale-gen en_US.UTF-8 \
#     && LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php \
#     && apt-get update \
#     \
#     && apt-get install -y --force-yes \
#     php7.2-bcmath \
#     php7.2-bz2 \
#     php7.2-cli \
#     php7.2-common \
#     php7.2-curl \
#     php7.2-cgi \
#     php7.2-dev \
#     php7.2-fpm \
#     php7.2-gd \
#     php7.2-gmp \
#     php7.2-imap \
#     php7.2-intl \
#     php7.2-json \
#     php7.2-ldap \
#     php7.2-mbstring \
#     php7.2-mcrypt \
#     php7.2-mysql \
#     php7.2-odbc \
#     php7.2-opcache \
#     php7.2-pgsql \
#     php7.2-phpdbg \
#     php7.2-pspell \
#     php7.2-readline \
#     php7.2-recode \
#     php7.2-soap \
#     php7.2-sqlite3 \
#     php7.2-tidy \
#     php7.2-xml \
#     php7.2-xmlrpc \
#     php7.2-xsl \
#     php7.2-zip \
#     php-tideways \
#     php-mongodb \
#     \
#     && sed -i "s/;date.timezone =.*/date.timezone = UTC/" /etc/php/7.1/cli/php.ini \
#     && sed -i "s/;date.timezone =.*/date.timezone = UTC/" /etc/php/7.1/fpm/php.ini \
#     && sed -i "s/display_errors = Off/display_errors = On/" /etc/php/7.1/fpm/php.ini \
#     && sed -i "s/upload_max_filesize = .*/upload_max_filesize = 10M/" /etc/php/7.1/fpm/php.ini \
#     && sed -i "s/post_max_size = .*/post_max_size = 12M/" /etc/php/7.1/fpm/php.ini \
#     && sed -i "s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/" /etc/php/7.1/fpm/php.ini \
#     \
#     && sed -i -e "s/pid =.*/pid = \/var\/run\/php7.1-fpm.pid/" /etc/php/7.1/fpm/php-fpm.conf \
#     && sed -i -e "s/error_log =.*/error_log = \/proc\/self\/fd\/2/" /etc/php/7.1/fpm/php-fpm.conf \
#     && sed -i -e "s/;daemonize\s*=\s*yes/daemonize = no/g" /etc/php/7.1/fpm/php-fpm.conf \
#     && sed -i "s/listen = .*/listen = 9000/" /etc/php/7.1/fpm/pool.d/www.conf \
#     && sed -i "s/;catch_workers_output = .*/catch_workers_output = yes/" /etc/php/7.1/fpm/pool.d/www.conf \
#     \ 
#     # RUN curl https://getcomposer.org/installer > composer-setup.php && php composer-setup.php && mv composer.phar /usr/local/bin/composer && rm composer-setup.php
#     \
#     && apt-get clean \
#     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
#     && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps


# EXPOSE 9000
# CMD ["php-fpm7.1"]

# prevent Debian's PHP packages from being installed
# https://github.com/docker-library/php/pull/542
RUN set -eux; \
    { \
    echo 'Package: php*'; \
    echo 'Pin: release *'; \
    echo 'Pin-Priority: -1'; \
    } > /etc/apt/preferences.d/no-debian-php

# dependencies required for running "phpize"
# (see persistent deps below)
ENV PHPIZE_DEPS \
    autoconf \
    dpkg-dev \
    file \
    g++ \
    gcc \
    libc-dev \
    make \
    pkg-config \
    re2c \
    dirmngr 

# persistent / runtime deps
RUN apt-get update && apt-get install -y \
    $PHPIZE_DEPS \
    ca-certificates \
    curl \
    xz-utils \
    apt-utils \
    --no-install-recommends \
    && rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV GPG_KEYS 1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F

ENV PHP_VERSION 7.2.4
ENV PHP_URL="https://secure.php.net/get/php-7.2.4.tar.xz/from/this/mirror" PHP_ASC_URL="https://secure.php.net/get/php-7.2.4.tar.xz.asc/from/this/mirror"
ENV PHP_SHA256="7916b1bd148ddfd46d7f8f9a517d4b09cd8a8ad9248734e7c8dd91ef17057a88" PHP_MD5=""

RUN set -xe; \
    \
    fetchDeps=' \
    wget \
    '; \
    if ! command -v gpg > /dev/null; then \
    fetchDeps="$fetchDeps \
    dirmngr \
    gnupg \
    "; \
    fi; \
    apt-get update; \
    apt-get install -y --no-install-recommends $fetchDeps; \
    rm -rf /var/lib/apt/lists/*; \
    \
    mkdir -p /usr/src; \
    cd /usr/src; \
    \
    wget -O php.tar.xz "$PHP_URL"; \
    \
    if [ -n "$PHP_SHA256" ]; then \
    echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
    fi; \
    if [ -n "$PHP_MD5" ]; then \
    echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
    fi; \
    \
    if [ -n "$PHP_ASC_URL" ]; then \
    wget -O php.tar.xz.asc "$PHP_ASC_URL"; \
    export GNUPGHOME="$(mktemp -d)"; \
    for key in $GPG_KEYS; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
    done; \
    gpg --batch --verify php.tar.xz.asc php.tar.xz; \
    rm -rf "$GNUPGHOME"; \
    fi; \
    \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps

COPY docker-php-source /usr/local/bin/

RUN set -eux; \
    \
    savedAptMark="$(apt-mark showmanual)"; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
    libargon2-0-dev \
    libcurl4-openssl-dev \
    libedit-dev \
    libsodium-dev \
    libsqlite3-dev \
    libssl-dev \
    libxml2-dev \
    zlib1g-dev \
    ${PHP_EXTRA_BUILD_DEPS:-} \
    ; \
    rm -rf /var/lib/apt/lists/*; \
    \
    export \
    CFLAGS="$PHP_CFLAGS" \
    CPPFLAGS="$PHP_CPPFLAGS" \
    LDFLAGS="$PHP_LDFLAGS" \
    ; \
    docker-php-source extract; \
    cd /usr/src/php; \
    gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; \
    debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; \
    # https://bugs.php.net/bug.php?id=74125
    if [ ! -d /usr/include/curl ]; then \
    ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl; \
    fi; \
    ./configure \
    --build="$gnuArch" \
    --with-config-file-path="$PHP_INI_DIR" \
    --with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
    \
    --disable-cgi \
    \
    # --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
    --enable-ftp \
    # --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
    --enable-mbstring \
    # --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
    --enable-mysqlnd \
    # https://wiki.php.net/rfc/argon2_password_hash (7.2+)
    --with-password-argon2 \
    # https://wiki.php.net/rfc/libsodium
    --with-sodium=shared \
    \
    --with-curl \
    --with-libedit \
    --with-openssl \
    --with-zlib \
    \
    # bundled pcre does not support JIT on s390x
    # https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT
    $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') \
    --with-libdir="lib/$debMultiarch" \
    \
    ${PHP_EXTRA_CONFIGURE_ARGS:-} \
    ; \
    make -j "$(nproc)"; \
    make install; \
    find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \
    make clean; \
    cd /; \
    docker-php-source delete; \
    \
    # reset apt-mark's "manual" list so that "purge --auto-remove" will remove all build dependencies
    apt-mark auto '.*' > /dev/null; \
    [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
    find /usr/local -type f -executable -exec ldd '{}' ';' \
    | awk '/=>/ { print $(NF-1) }' \
    | sort -u \
    | xargs -r dpkg-query --search \
    | cut -d: -f1 \
    | sort -u \
    | xargs -r apt-mark manual \
    ; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    \
    php --version; \
    \
    # https://github.com/docker-library/php/issues/443
    pecl update-channels; \
    rm -rf /tmp/pear ~/.pearrc

COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)
RUN docker-php-ext-enable sodium

ENTRYPOINT ["docker-php-entrypoint"]
##<autogenerated>##
WORKDIR /var/www/html

RUN set -ex \
    && cd /usr/local/etc \
    && if [ -d php-fpm.d ]; then \
    # for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
    sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
    cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
    else \
    # PHP 5.x doesn't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
    mkdir php-fpm.d; \
    cp php-fpm.conf.default php-fpm.d/www.conf; \
    { \
    echo '[global]'; \
    echo 'include=etc/php-fpm.d/*.conf'; \
    } | tee php-fpm.conf; \
    fi \
    && { \
    echo '[global]'; \
    echo 'error_log = /proc/self/fd/2'; \
    echo; \
    echo '[www]'; \
    echo '; if we send this to /proc/self/fd/1, it never appears'; \
    echo 'access.log = /proc/self/fd/2'; \
    echo; \
    echo 'clear_env = no'; \
    echo; \
    echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
    echo 'catch_workers_output = yes'; \
    } | tee php-fpm.d/docker.conf \
    && { \
    echo '[global]'; \
    echo 'daemonize = no'; \
    echo; \
    echo '[www]'; \
    echo 'listen = 9000'; \
    } | tee php-fpm.d/zz-docker.conf

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    libmemcached-dev \
    libkrb5-dev \
    libc-client-dev \
    libfreetype6-dev \
    libmagickwand-dev \
    libmagickcore-dev \
    libbz2-dev \
    libpq-dev \
    libxml2-dev \
    libargon2-0-dev \
    libcurl4-openssl-dev \
    libedit-dev \
    libsodium-dev \
    libsqlite3-dev \
    libssl-dev \
    libxml2-dev \
    libpng-dev \
    libjpeg-dev \
    zlib1g-dev \
    \
    && docker-php-ext-install \
    bcmath \
    bz2 \
    iconv \
    mbstring \
    mysqli \
    pdo \
    pgsql \
    pdo_mysql \
    pdo_pgsql \
    soap \
    zip \
    \
    && docker-php-ext-configure gd \
    --with-freetype-dir=/usr/include/ \
    --with-jpeg-dir=/usr/include/ \
    --with-png-dir=/usr/include/ \
    && docker-php-ext-install gd \
    && docker-php-ext-configure intl \
    && docker-php-ext-install intl \
    && pecl install imagick \
    && docker-php-ext-enable imagick \
    && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \
    && docker-php-ext-install imap \
    && pecl install memcached \
    && docker-php-ext-enable memcached \
    && pecl install mongodb \
    && docker-php-ext-enable mongodb \
    && pecl install redis \
    && docker-php-ext-enable redis \
    && pecl install xdebug \
    && docker-php-ext-enable xdebug 

RUN set -xe; \
    fetchDeps=' \
    wget \
    tar \
    rsync \
    '; \
    apt-get update; \
    apt-get install -y --no-install-recommends $fetchDeps ; \
    cd /tmp ; \
    wget -O wkhtmltox.tar.xz https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz ; \
    tar xvf wkhtmltox.tar.xz 

RUN  cd /tmp ; \
    # mv -vf wkhtmltox/* /usr/ ; \
    rsync -ar wkhtmltox/ /usr/ ; \
    rm -rf wkhtmltox wkhtmtox.tar.xz ; \
    # rm -rf wkhtmtox.tar.xz ; \
    # chmod +x /usr/bin/wkhtmltopdf /usr/bin/wkhtmltoimage ; \
    ln -sf /usr/bin/wkhtmltopdf /usr/local/bin/wkhtmltopdf ; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps \
    \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; \
    usermod -u 1000 www-data
# chown www-data:staff /var/www/html
##</autogenerated>##

EXPOSE 9000
CMD ["php-fpm"]
